// Code generated by "mkgopack testdata/sample.go"

package testdata

import (
	"bytes"
	"fmt"
	"unsafe"
)

func (s EmbedStruct) ToPackedByte() []byte {
	var b bytes.Buffer

	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.EmbedField1)), 9))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.EmbedField2)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.EmbedField3)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.EmbedField4)), 8))

	return b.Bytes()
}

func (s InnerStruct) ToPackedByte() []byte {
	var b bytes.Buffer

	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InnerField1)), 7))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InnerField2)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InnerField3)), 16))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InnerField4)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InnerField5)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InnerField6)), 8))

	return b.Bytes()
}

func (s TestStruct) ToPackedByte() []byte {
	var b bytes.Buffer

	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Field1)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Field2)), 9))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Field3)), 4))
	for i := 0; i < 2; i++ {
		b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Field4[i].InnerField1)), 7))
		b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Field4[i].InnerField2)), 8))
		b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Field4[i].InnerField3)), 16))
		b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Field4[i].InnerField4)), 8))
		b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Field4[i].InnerField5)), 8))
		b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Field4[i].InnerField6)), 8))
	}
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Field5)), 20))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Field6)), 16))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Field7)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Field8)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Field9)), 12))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Field10)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.EmbedStruct.EmbedField1)), 9))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.EmbedStruct.EmbedField2)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.EmbedStruct.EmbedField3)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.EmbedStruct.EmbedField4)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Field11)), 14))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.NestedStruct.NestedField)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.NestedStruct.NestedField2)), 9))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.NestedStruct.NestedField3)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.NestedStruct.NestedField4)), 8))

	return b.Bytes()
}

type PackedStruct interface {
	ToPackedByte() []byte
}

func ToStruct[P PackedStruct](buf []byte) (P, error) {
	var st P

	switch st := any(st).(type) { // convert to any for type switch
	case EmbedStruct:
		if int(unsafe.Sizeof(st)) != len(buf) {
			return st, fmt.Errorf("the size of buffer does not match the size of struct")
		}

		st = EmbedStruct{
			EmbedField1: *(*[9]byte)(unsafe.Pointer(&buf[0])),
			EmbedField2: *(*NamedUint32_2)(unsafe.Pointer(&buf[9])),
			EmbedField3: *(*[1]uint16)(unsafe.Pointer(&buf[13])),
			EmbedField4: *(**uintptr)(unsafe.Pointer(&buf[15])),
		}
	case InnerStruct:
		if int(unsafe.Sizeof(st)) != len(buf) {
			return st, fmt.Errorf("the size of buffer does not match the size of struct")
		}

		st = InnerStruct{
			InnerField1: *(*[7]uint8)(unsafe.Pointer(&buf[0])),
			InnerField2: *(**uint32)(unsafe.Pointer(&buf[7])),
			InnerField3: *(*[2]*unsafe.Pointer)(unsafe.Pointer(&buf[15])),
			InnerField4: *(*uint64)(unsafe.Pointer(&buf[31])),
			InnerField5: *(*[4]uint16)(unsafe.Pointer(&buf[39])),
			InnerField6: *(*uintptr)(unsafe.Pointer(&buf[47])),
		}
	case TestStruct:
		if int(unsafe.Sizeof(st)) != len(buf) {
			return st, fmt.Errorf("the size of buffer does not match the size of struct")
		}

		st = TestStruct{
			Field1: *(*uint32)(unsafe.Pointer(&buf[0])),
			Field2: *(*[9]uint8)(unsafe.Pointer(&buf[4])),
			Field3: *(*NamedUint32)(unsafe.Pointer(&buf[13])),
			Field4: [2]InnerStruct{
				{
					InnerField1: *(*[7]uint8)(unsafe.Pointer(&buf[17])),
					InnerField2: *(**uint32)(unsafe.Pointer(&buf[24])),
					InnerField3: *(*[2]*unsafe.Pointer)(unsafe.Pointer(&buf[32])),
					InnerField4: *(*uint64)(unsafe.Pointer(&buf[48])),
					InnerField5: *(*[4]uint16)(unsafe.Pointer(&buf[56])),
					InnerField6: *(*uintptr)(unsafe.Pointer(&buf[64])),
				},
				{
					InnerField1: *(*[7]uint8)(unsafe.Pointer(&buf[72])),
					InnerField2: *(**uint32)(unsafe.Pointer(&buf[79])),
					InnerField3: *(*[2]*unsafe.Pointer)(unsafe.Pointer(&buf[87])),
					InnerField4: *(*uint64)(unsafe.Pointer(&buf[103])),
					InnerField5: *(*[4]uint16)(unsafe.Pointer(&buf[111])),
					InnerField6: *(*uintptr)(unsafe.Pointer(&buf[119])),
				},
			},
			Field5:  *(*[5]NamedUint32_2)(unsafe.Pointer(&buf[127])),
			Field6:  *(*complex128)(unsafe.Pointer(&buf[147])),
			Field7:  *(*uintptr)(unsafe.Pointer(&buf[163])),
			Field8:  *(*unsafe.Pointer)(unsafe.Pointer(&buf[171])),
			Field9:  *(*[3]float32)(unsafe.Pointer(&buf[179])),
			Field10: *(**uint64)(unsafe.Pointer(&buf[191])),
			EmbedStruct: testdata.EmbedStruct{
				EmbedField1: *(*[9]byte)(unsafe.Pointer(&buf[199])),
				EmbedField2: *(*NamedUint32_2)(unsafe.Pointer(&buf[208])),
				EmbedField3: *(*[1]uint16)(unsafe.Pointer(&buf[212])),
				EmbedField4: *(**uintptr)(unsafe.Pointer(&buf[214])),
			},
			Field11: *(*[7]uint16)(unsafe.Pointer(&buf[222])),
			NestedStruct: struct {
				NestedField  uint32
				NestedField2 [9]byte
				NestedField3 *uintptr
				NestedField4 uint64
			}{
				NestedField:  *(*uint32)(unsafe.Pointer(&buf[236])),
				NestedField2: *(*[9]byte)(unsafe.Pointer(&buf[240])),
				NestedField3: *(**uintptr)(unsafe.Pointer(&buf[249])),
				NestedField4: *(*uint64)(unsafe.Pointer(&buf[257])),
			},
		}
	}

	return st, nil
}
